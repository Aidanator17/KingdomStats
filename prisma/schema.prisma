generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model riot_accounts {
  riot_account_id Int       @id @default(autoincrement())
  user_id         Int
  puuid           String    @unique(map: "puuid") @db.VarChar(100)
  game_name       String?   @db.VarChar(50)
  tag_line        String?   @db.VarChar(10)
  verified        Boolean?  @default(false)
  linked_at       DateTime? @default(now()) @db.Timestamp(0)
  users           users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "riot_accounts_ibfk_1")

  @@index([user_id], map: "user_id")
}

model user_favourites {
  favourite_id Int                         @id @default(autoincrement())
  user_id      Int
  target_puuid String                      @db.VarChar(100)
  added_at     DateTime?                   @default(now()) @db.Timestamp(0)
  note         String?                     @db.Text
  nickname     String?                     @db.VarChar(50)
  visibility   user_favourites_visibility? @default(public)
  users        users                       @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "user_favourites_ibfk_1")

  @@unique([user_id, target_puuid], map: "unique_favourite")
}

model user_login_attempts {
  attempt_id   Int       @id @default(autoincrement())
  user_id      Int?
  success      Boolean?
  attempted_at DateTime? @default(now()) @db.Timestamp(0)
  ip_address   String?   @db.VarChar(45)
  users        users?    @relation(fields: [user_id], references: [user_id], onUpdate: NoAction, map: "user_login_attempts_ibfk_1")

  @@index([user_id], map: "user_id")
}

model user_profiles {
  user_id      Int     @id
  display_name String? @db.VarChar(100)
  bio          String? @db.Text
  avatar_url   String? @db.VarChar(255)
  users        users   @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "user_profiles_ibfk_1")
}

model user_role_assignments {
  user_id     Int
  role_id     Int
  assigned_at DateTime?  @default(now()) @db.Timestamp(0)
  users       users      @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "user_role_assignments_ibfk_1")
  user_roles  user_roles @relation(fields: [role_id], references: [role_id], onDelete: Cascade, onUpdate: NoAction, map: "user_role_assignments_ibfk_2")

  @@id([user_id, role_id])
  @@index([role_id], map: "role_id")
}

model user_roles {
  role_id               Int                     @id @default(autoincrement())
  role_name             String                  @unique(map: "role_name") @db.VarChar(50)
  user_role_assignments user_role_assignments[]
}

model users {
  user_id               Int                     @id @default(autoincrement())
  username              String                  @unique(map: "username") @db.VarChar(50)
  email                 String                  @unique(map: "email") @db.VarChar(100)
  password_hash         String                  @db.VarChar(255)
  created_at            DateTime?               @default(now()) @db.Timestamp(0)
  last_login            DateTime?               @db.Timestamp(0)
  riot_accounts         riot_accounts[]
  user_favourites       user_favourites[]
  user_login_attempts   user_login_attempts[]
  user_profiles         user_profiles?
  user_role_assignments user_role_assignments[]
}

enum user_favourites_visibility {
  public
  private
}
